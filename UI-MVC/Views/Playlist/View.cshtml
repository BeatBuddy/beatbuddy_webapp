@using BB.BL.Domain.Playlists
@using BB.BL.Domain.Users
@using BB.BL.Domain.Organisations

@model Playlist
@{
    ViewBag.Title = Model.Name;
    ViewBag.NoFooter = true;
}


@section escape_padding {
<div id="sharedialog" class="modal">
    <div class="modal-content" >
        <a href="#close" title="Close" class="close">X</a>
        <div class="modal-body">
            @{ Html.RenderPartial("Share", Model); }
        </div>
    </div>
</div>
    <div id="playlistbanner">
        <div class="content">
            @{
                var imageUrl = Model?.ImageUrl ?? "playlist_default.png";
                <img class="borderround" src="~/Content/img/Playlists/@imageUrl" style="width: 150px; height: 150px" alt="Playlist image" />

            }

            <div class="fill">
                <div class="title">
                    @if (ViewBag.Organisation != null)
                    {
                        <h1>Playlist</h1>
                        @Model.Name<text> by </text>
                        <a href="@Url.Action("Details", "Organisations", new {id = @ViewBag.Organisation.Id})" style="color: white">#@ViewBag.Organisation.Name</a>
                    }
                    else
                    {
                        <h1>Playlist</h1>
                        @Model.Name
                    }
                </div>

                <a class="btn btn-right" href="#sharedialog">
                    <i class="material-icons">link</i> Share
                </a>

            </div>

            <p class="nomargintop textshadow">@Model.Description</p>

            <div>
                <h3 id="listenerCount"></h3>
                <div id="listenerImg" class="co-organiser" style="float: left;">
                </div>
            </div>

            <div class="menu">
                <div class="item selected">
                    <a class="title" href="#">
                        <h1>Queue</h1>
                        @if (Model.PlaylistTracks.Count > 1 | Model.PlaylistTracks.Count == 0)
                        {
                            <text>@Model.PlaylistTracks.Count tracks in queue</text>
                        }
                        else
                        {
                            <text>1 track in queue</text>
                        }
                    </a>
                </div>
                <div class="item">
                    <a class="title" href="@Url.Action("View", "History", new {id = Model.Id})">
                        <h1>History</h1>
                        @if (ViewBag.HistoryCount > 1 | ViewBag.HistoryCount == 0)
                        {
                            <text>@ViewBag.HistoryCount tracks in history</text>
                        }
                        else
                        {
                            <text>1 track in history</text>
                        }
                    </a>
                </div>
            </div>
        </div>
    </div>
}
<a id="viewGrid" style="cursor: pointer"><i class="material-icons btn-right" style="font-size: 2em; margin-right: 10px; margin-top: -5px">view_module</i></a>
<a id="viewList" style="cursor: pointer"><i class="material-icons btn-right" style="font-size: 2em; margin-right: 10px; margin-top: -5px">view_headline</i></a>
<div id="playlistTable">

    <div id="playlist-view">
        @Html.Partial("PlaylistTable", @Model)
    </div>

    <div id="nowPlayingRow" style="margin-top: 1em">
        @if (((List<User>) ViewBag.Organisers).Any(p => p.Email == User.Identity.Name))
        {
            if (Model.PlaylistTracks.Count != 0)
            {
                <a class="btn" id="playBtn"><i id="icon" class="material-icons">play_arrow</i> </a>
            }
            else
            {
                <a class="btn disabled" id="playBtn"><i id="icon" class="material-icons">play_arrow</i> </a>
            }
            if (Model.PlaylistTracks.Count > 1)
            {
                <a class="btn" id="nextBtn"><i class="material-icons">skip_next</i> </a>
        }
        else
        {
                <a class="btn disabled" style="display: none" id="nextBtn"><i class="material-icons">skip_next</i> </a>
        }
        }
        else
        {
            <a class="btn " id="playBtn" style="display: none"><i id="icon" class="material-icons">play_arrow</i> </a>
            <a class="btn disabled" style="display: none" id="nextBtn"><i class="material-icons">skip_next</i> </a>
        }


        @if (Request.IsAuthenticated)
        {
            <a href="#addTrackModal" class="btn btn-right" style="display: inline-block">
                <i class="material-icons">playlist_add</i> add track
            </a>

            <a href="#addPlaylistModal" class="btn btn-right" style="margin-right: 20px">
                <i class="material-icons">playlist_add</i> import playlist
            </a>
        }
    </div>

    <div id="addTrackModal" class="modal">
        <div class="modal-content">
            <a href="#close" id="close-modal" title="Close" class="close">X</a>
            <div class="modal-body" style="height: 100%; width: 100%;">
                @{
                    Html.RenderPartial("AddTrack");
                }
            </div>
        </div>
    </div>

    <div id="addPlaylistModal" class="modal">
        <div class="modal-content">
            <a href="#closePlaylist" id="close-modal-playlist" title="Close" class="close">X</a>
            <div class="modal-body" style="height: 100%; width: 100%;">
                @{
                    Html.RenderPartial("AddPlaylist");
                }
            </div>
        </div>
    </div>

    <div id="bottommargin"></div>
</div>

@section sidebar{
    <div id="chatContainer">
        <i id="chatIcon" class="material-icons">keyboard_arrow_left</i>
        <div id="chatContent">
            <div class="title row top">
                <h1>Chat</h1> along!
            </div>

            @{
                if (Request.IsAuthenticated)
                {
                    <input type="hidden" id="displayname" value="@ViewBag.CurrentUser.Nickname"/>
                    <input type="hidden" id="image" value="/Content/img/Users/@ViewBag.CurrentUser.ImageUrl"/>
                    
                    <ul id="discussion" class="row content"></ul>

                    <div id="sendChat" class="row bottom">
                        <input type="text" class="custom-input" id="message" style="width: 247px"/>
                        <input type="button" id="sendmessage" value="Send" class="btn-chat" style="margin-left: 10px"/>
                    </div>
                }
            }
        </div>
    </div>
}

<div id="footerSlideContainer">
    <div id="footerSlideContent" style="width: 80%">
        <div id="footertop" style="text-align: center; cursor: pointer" click="clickFooter">
            <i id="footerIcon" class="material-icons">keyboard_arrow_up</i>
        </div>

        <i id="tuneinbutton" style="display: none" class="material-icons">volume_up</i>
        <i id="fullscreenbutton" class="material-icons">fullscreen</i>

        <table style="width: 100%; margin-top: -15px">
            <tr>
                <td style="width: 5%">
                    <img src="~/Content/img/default_cover.png" id="thumbnail" class="round" />
                </td>
                <td style="width: 95%">
                    <div class="title" style="margin-top: 0.5em; margin-right: 1.5em">
                        <h1>Now Playing </h1> <span id="nowPlaying"></span>
                    </div>
                    <span id="time"></span>
                    <div id="myProgress" class="progress" style="margin-top: 0.2em">
                        <div id="myBar" class="bar"></div>
                    </div>
                </td>
            </tr>
        </table>

    </div>
</div>

<div id="player" style="display: none"></div>

<div id="fullscreenplayer" style="display: none">
    <div id="backgroundcover"></div>
    <div id="darkoverlay">
        <img id="nowPlayingLogo" src="~/Content/img/logo_header_white.png" alt="beatbuddy logo" />
    </div>
    <div id="fullscreenComingUp">
        <p>Coming up next...</p>
        <ul>
            @{
                var counter = 1;
                var tracks = Model.PlaylistTracks.OrderByDescending(pt => pt.Votes.Sum(v => v.Score)).Take(3);
                foreach (PlaylistTrack track in tracks)
                {
                    var cls = "first";
                    if (counter == 2)
                    {
                        cls = "second";
                    }
                    if (counter == 3)
                    {
                        cls = "third";
                    }

                    <li class="@cls">
                        <span class="counter">@counter</span>
                        @if (track.Track.CoverArtUrl != null)
                        {
                            <img class="albumart" src="@track.Track.CoverArtUrl" alt="album art" />
                        }
                        else
                        {
                            <img class="albumart" src="~/Content/img/default_cover.png" alt="album art" />
                        }
                        <span class="trackartist">@track.Track.Artist</span>
                        <span class="tracktitle">- @track.Track.Title</span>
                        <i class="material-icons">thumb_up</i>
                        <span class="trackvotes">@track.Votes.Sum(v => v.Score)</span>
                    </li>
                    counter++;
                }
                if (tracks.Count() == 0)
                {
                    <li><span class="tracktitle">No tracks coming up next... Add some yourself!</span></li>
            }
            }
        </ul>

    </div>
    <div id="nowPlayingAlbumArt"></div>
    <span id="nowPlayingArtist">Nothing</span>
    <span id="nowPlayingTitle">Is playing right now</span>
    <div id="nowPlayingProgress">
        <div id="nowPlayingProgressBar"></div>
    </div>
    <i id="fullscreenexitbutton" class="material-icons">fullscreen_exit</i>
</div>

@section Scripts{
    <script src="~/Scripts/jquery.signalR-2.2.0.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        var gridView = false;
        var playing = false;
        var listening = false;
        var intervalId = 0;
        var currentTrack = null;
        var play = $.connection.playlistHub;
        var chat = $.connection.chatHub;

        $(function () {
            chat.client.broadcastMessage = function (name, message, image) {
                var encodedName = $('<div />').text(name).html();
                var encodedMsg = $('<div />').text(message).html();
                if (image == "/Content/img/Users/") {
                    image = "/Content/img/default-avatar.png";
                }
                $('#discussion').append('<li class="chatMessage">' + 
	                                        '<img src="' + image + '" class="round" />' +
	                                        '<span class="chatUser">' + encodedName + '</span>' +
	                                        '<span class="chatText">' + encodedMsg + '</span>' +
                                        '</li>');

                updateScroll();
            };

            $('#message').focus();

            $.connection.hub.start().done(
                function() {
                    chat.server.joinGroup("@Model.Id");
                    $('#sendmessage').click(sendChatMessage);
                    $('#message').keyup(function (e) {
                        if (e.which === 13) {
                            sendChatMessage();
                        }
                    });
                });
        });

        function sendChatMessage() {
            if ($('#message').val() == null || $('#message').val() === "") return;

            chat.server.send($('#displayname').val(), $('#message').val(),$('#image').val(),(@Model.Id));
            $('#message').val('').focus();
        }

        function updateScroll(){
            var element = document.getElementById("discussion");
            element.scrollTop = element.scrollHeight;
        }

        play.client.addNewMessageToPage = function() {
            updatePlaylist();
        }

        play.client.startMusicPlaying = function(data) {
            cue_and_play(data, 0);
            var playBtn = document.getElementById("playBtn");
            playBtn.style.display = "none";
        }

        play.client.pauseMusicPlaying = function() {
            player.pauseVideo();
        }

        play.client.stopMusicPlaying = function() {
            closeFooter();
            document.getElementById("nowPlaying").innerHTML = "";
            $('#thumbnail').attr("src", '@Url.Content("~/Content/img/default_cover.png")');
            $('#nowPlayingAlbumArt').css('background-image', "url(" + '@Url.Content("~/Content/img/default_cover.png")' + ")");
            $('#backgroundcover').css('background-image', "url(" + '@Url.Content("~/Content/img/default_cover.png")' + ")");
            var time = document.getElementById("time");
            time.innerHTML = "";

            player.stopVideo();
        }

        play.client.resumeMusicPlaying = function(data) {
            player.seekTo(data);
            player.playVideo();
        }

        play.client.modifyListeners = function(data, users) {
            var src = document.getElementById('listenerImg');
            var i;
            var unknownUserCounter = 0;
            while (src.firstChild) {
                src.removeChild(src.firstChild);
            }
            var img;
            for (i = 0; i < users.length; i++) {
                img = document.createElement("img");
                if (users[i].User != null) {
                    if (users[i].User.ImageUrl != null) {
                        img.src = "/Content/img/Users/" + users[i].User.ImageUrl;
                    } else {
                        img.src = "/Content/img/default-avatar.png";
                    }
                    img.className = 'round';
                    img.style.marginRight = "10px";
                    img.title = users[i].User.Email;
                    src.appendChild(img);
                } else {
                    unknownUserCounter++;

                }
            }
            if (unknownUserCounter > 0) {
                img = document.createElement("img");
                img.src = "/Content/img/default-avatar.png";
                img.className = 'round';
                img.title = unknownUserCounter + " sneaky listener(s)";
                src.appendChild(img);
            }
            document.getElementById('listenerCount').innerHTML = data + "";
        }

        play.client.syncLive = function() {
            play.server.syncLive("@Model.Id", currentTrack, player.getCurrentTime());
        }
        play.client.syncLiveWhenPlaying = function() {
            play.server.syncLiveWhenPlaying("@Model.Id", currentTrack, player.getCurrentTime());
        }

        play.client.playLive = function(data, startSeconds) {
            openFooter();
            if (listening) {
                if (data != null) {
                    cue_and_play(data, startSeconds + 1);
                }
            } else {
                player.stopVideo();
                document.getElementById("nowPlaying").innerHTML = data.Title + ' - ' + data.Artist;
                document.getElementById("tuneinbutton").style.display = "inline";
                clearInterval(intervalId);

                $('#time').empty();
                if (data.CoverArtUrl != null) {
                    $('#thumbnail').attr("src", data.CoverArtUrl);
                    $('#nowPlayingAlbumArt').css('background-image', "url(" + data.CoverArtUrl + ")");
                    $('#backgroundcover').css('background-image', "url(" + data.CoverArtUrl + ")");
                } else {
                    $('#thumbnail').attr("src", '@Url.Content("~/Content/img/default_cover.png")');
                    $('#nowPlayingAlbumArt').css('background-image', "url(" + '@Url.Content("~/Content/img/default_cover.png")' + ")");
                    $('#backgroundcover').css('background-image', "url(" + '@Url.Content("~/Content/img/default_cover.png")' + ")");
                }
            }
            updatePlaylist();
        }

        play.client.scoreUpdated = function(id, playlistTrack) {
            $(".trackvotes[data-id='" + id + "']").html(playlistTrack.Score);
            updatePlaylist();
            updateUpcomingTracks();
        }

        $('#tuneinbutton').click(function() {
            if (listening) {
                listening = false;
            } else {
            listening = true;
            }
            toggle(document.getElementById('tuneinbutton'));
            play.server.playLive("@Model.Id");
        });
        $('#viewList').click(function() {
            gridView = false;
            updatePlaylist();
        });
        $('#viewGrid').click(function() {
            gridView = true;
            updatePlaylist();
        });

        function cue_and_play(data, seconds) {
            player.cueVideoById(data.TrackId, seconds, "small");
            document.getElementById("nowPlaying").innerHTML = data.Title + ' - ' + data.Artist;
            $(function() {
                intervalId = setInterval(updateTime, 50);
            });
            openFooter();

            if (data.CoverArtUrl != null) {
                $('#thumbnail').attr("src", data.CoverArtUrl);
                $('#nowPlayingAlbumArt').css('background-image', "url(" + data.CoverArtUrl + ")");
                $('#backgroundcover').css('background-image', "url(" + data.CoverArtUrl + ")");
            } else {
                $('#thumbnail').attr("src", '@Url.Content("~/Content/img/default_cover.png")');
                $('#nowPlayingAlbumArt').css('background-image', "url(" + '@Url.Content("~/Content/img/default_cover.png")' + ")");
                $('#backgroundcover').css('background-image', "url(" + '@Url.Content("~/Content/img/default_cover.png")' + ")");
            }
            player.playVideo();
        }

        var footerOpen = false;
        var chatOpen = false;

        jQuery(function($) {
            $('#chatIcon').click(function() {
                if (chatOpen === false) {
                    openChat();
                    chatOpen = true;
                } else {
                    closeChat()
                    chatOpen = false;
                };
            });
        });

        function openChat() {
            $('.body').animate({ marginRight: "400px" }, 300);
            $('#chatContainer').animate({ width: "400px" }, 300);
            $("#footerSlideContainer").animate({ paddingRight: "400px" }, 300);
            chatIcon.innerHTML = 'keyboard_arrow_right';
        }

        function closeChat(){
            $('.body').animate({ marginRight: "28px" }, 300);
            $('#chatContainer').animate({ width: "28px" }, 300);
            $("#footerSlideContainer").animate({ paddingRight: "28px" }, 300);
            chatIcon.innerHTML = 'keyboard_arrow_left';
        }

        jQuery(function($) {
            $('#footertop').click(function() {
                if (footerOpen === false) {
                    openFooter();
                } else {
                    closeFooter();
                }
            });
        });

        function clickFooter() {
            if (footerOpen) {
                closeFooter();
            } else {
                closeFooter();
            }
        }

        function openFooter() {
            $('#footerSlideContent').animate({ height: '125px' });
            $(this).css('backgroundPosition', 'bottom left');
            $('#bottommargin').animate({ marginBottom: '9em' }, 500, null);
            footerOpen = true;
            var footerIcon = document.getElementById("footerIcon");
            footerIcon.innerHTML = 'keyboard_arrow_down';
        }

        function closeFooter() {
            $('#footerSlideContent').animate({ height: '20px' });
            $(this).css('backgroundPosition', 'top left');
            $('#bottommargin').animate({ marginBottom: '3em' }, 500, null);
            footerOpen = false;
            var footerIcon = document.getElementById("footerIcon");
            footerIcon.innerHTML = 'keyboard_arrow_up';
        }

        var markup = '<li class="track" data-id="${TrackSource.TrackId}">' +
            '<img class="thumbnail" src="${CoverArtUrl}"/>' +
            '<span class="artist">${Artist}</span>' +
            '<span class="tracktitle">${Title}</span>' +
            '</li>';
        $.template("trackTemplate", markup);

        $.ajaxSetup({
            beforeSend: function() {
                $("#loading").show();
            },
            complete: function() {
                $("#loading").hide();
            }
        });

        $("#loading").hide();

        function fetchQueryResults() {
            $.ajax('@Url.Action("SearchTrack")/?q=' + $('#query').val())
                .done(function(result) {
                    $("#results").empty();
                    $.tmpl("trackTemplate", result).appendTo("#results");
                    $("#results li").on("click", function() {
                        addTrack($(this).attr('data-id'));
                    });
                })
                .fail(function() {
                    alert("error");
                });
        }

        function addTrack(id) {
            $.ajax({
                url: '@Url.Action("AddTrack")',
                method: 'POST',
                data: { playlistId: @ViewBag.PlaylistId, id: id },
                async: false
            }).done(function(data) {
                window.location.href = '/Playlist/View?key=' + '@ViewBag.PlaylistKey' + '#close';
                updatePlaylist();
                var playBtn = document.getElementById('playBtn');
                playBtn.className = 'btn';
                playBtn.addEventListener("click", getNextTrack);
                play.server.addTrack("@Model.Id");
                if (data > 1 || (data >0 && currentTrack != null)) {
                    var nxtBtn = document.getElementById('nextBtn');
                    nxtBtn.className = 'btn';
                    nxtBtn.style.display = "inline-block";
                }
            }).fail(function() {
                notie.alert(3, 'You cannot add a song that is already in the list or is already played', 2.5);
            });
        }

        function debounce(func, wait, immediate) {
            var timeout;
            return function() {
                var context = this, args = arguments;
                var later = function() {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        };

        var debouncedFetch = debounce(function() {
            fetchQueryResults();
        }, 500);

        $("#query").on('keydown', function() {
            debouncedFetch();
        });
        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        var player;

        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '390',
                width: '640',
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        var firstPlay = true;

        function onPlayerReady(event) {
            var playButton = document.getElementById("playBtn");
            if (playButton != null) playButton.addEventListener("click", getNextTrack);

            var nextButton = document.getElementById("nextBtn");
            if (nextButton != null)
                nextButton.addEventListener("click", function() {
                getNextTrack();
            });
            $.connection.hub.start().done(function() {
                play.server.joinGroup("@Model.Id");
            });
        }

        function assignPlaylistMaster(userData) {
            $.ajax('/Playlist/AssignPlaylistMaster/', {
                type: 'POST',
                async: false,
                data: { id: @ViewBag.PlaylistId, userEmail: userData }
            }).done(function() {
                updatePlaylist();
            }).fail(function() {

            });
        }

        function toggle(button) {
            if (listening) {
                button.innerHTML = "volume_off";
            } else {
                button.innerHTML = "volume_up";
            }
        }

        function updateTime() {
            var time = document.getElementById("time");
            var currentTime = secondsToTime(player.getCurrentTime());
            var duration = secondsToTime(player.getDuration());
            time.innerHTML = currentTime + ' | ' + duration;
            var percentageTime = (player.getCurrentTime() / player.getDuration()) * 100;

            var bar = document.getElementById("myBar");
            bar.style.width = percentageTime + '%';

            var barFullscreen = document.getElementById("nowPlayingProgressBar");
            barFullscreen.style.width = percentageTime + '%';
        }

        var counter = 0;


        function secondsToTime(secs) {
            d = Number(secs);
            var h = Math.floor(d / 3600);
            var m = Math.floor(d % 3600 / 60);
            var s = Math.floor(d % 3600 % 60);
            return ((h > 0 ? h + ":" + (m < 10 ? "0" : "") : "") + m + ":" + (s < 10 ? "0" : "") + s);
        }

        var startedPlaying = false;

        function onPlayerStateChange(event) {
            var playButton = document.getElementById("playBtn");
            playButton.removeEventListener("click", getNextTrack);
            var icon = document.getElementById("icon");

            if (event.data === -1 && firstPlay) {
                player.playVideo();
                firstPlay = false;
            }

            if (event.data === YT.PlayerState.PLAYING) {
                playing = true;
                playButton.addEventListener("click", function() {
                    player.pauseVideo();
                    play.server.pausePlaying("@Model.Id");
                });
                icon.innerHTML = 'pause';
            }

            if (event.data === YT.PlayerState.PAUSED) {
                icon.innerHTML = 'play_arrow';
                playButton.addEventListener("click", function() {
                    player.playVideo();
                    play.server.resumePlaying(player.getCurrentTime(), "@Model.Id");
                });
            }

            if (startedPlaying && event.data === YT.PlayerState.ENDED) {
                playing = false;
                getNextTrack();
            }
        }

        function getNextTrack() {
            $.ajax('/Playlist/GetNextTrack/', {
                type: 'GET',
                data: { id: @ViewBag.PlaylistId },
                contentType: "application/json",
                dataType: "json"
            }).done(function(data) {
                if (data != null) {
                    if (!startedPlaying) startedPlaying = true;
                    player.cueVideoById(data.TrackId);
                    document.getElementById("nowPlaying").innerHTML = data.Title + ' - ' + data.Artist;
                    $(function() {
                        setInterval(updateTime, 50);
                    });
                    var nextButton = document.getElementById("nextBtn");

                    if (nextButton != null) {
                        if (data.NextTracks === 1) {
                            nextButton.className = 'btn disabled';
                        } else {
                            nextButton.className = 'btn';
                        }
                    }
                }

                openFooter();
                moveTrackToHistory();

                if (data.CoverArtUrl != null) {
                    $('#thumbnail').attr("src", data.CoverArtUrl);
                    $('#nowPlayingAlbumArt').css('background-image', "url(" + data.CoverArtUrl + ")");
                    $('#backgroundcover').css('background-image', "url(" + data.CoverArtUrl + ")");
                } else {
                    $('#thumbnail').attr("src", '@Url.Content("~/Content/img/default_cover.png")');
                    $('#nowPlayingAlbumArt').css('background-image', "url(" + '@Url.Content("~/Content/img/default_cover.png")' + ")");
                    $('#backgroundcover').css('background-image', "url(" + '@Url.Content("~/Content/img/default_cover.png")' + ")");
                }

                $('#nowPlayingTitle').html(data.Title);
                $('#nowPlayingArtist').html(data.Artist);
                $('#thumbnail').attr("src", data.CoverArtUrl);
                updateUpcomingTracks();

                player.playVideo();
                currentTrack = data;
                play.server.startPlaying(data, "@Model.Id");
            }).fail(function() {
                var playBtn = document.getElementById('playBtn');
                playBtn.className = 'btn disabled';
                var icon = document.getElementById("icon");
                icon.innerHTML = 'play_arrow';
                document.getElementById("nowPlaying").innerHTML = '';
                closeFooter();
                playBtn.addEventListener("click", getNextTrack);
                var time = document.getElementById("time");
                time.innerHTML = '';
                currentTrack = null;
                play.server.stopPlaying("@Model.Id");
            });
        }

        function moveTrackToHistory() {
            $.ajax('/Playlist/MoveTrackToHistory/', {
                type: 'POST',
                data: { id: @ViewBag.PlaylistId },
                async: false
            }).done(function() {
                updatePlaylist();
            }).fail(function() {
                var nextButton = document.getElementById("nextBtn");
                nextButton.className = 'btn disabled';
                var playButton = document.getElementById("playBtn");
                playButton.className = 'btn disabled';
                var icon = document.getElementById("icon");
                icon.innerHTML = 'play_arrow';
            });
        }

        function updatePlaylist() {
            if (gridView) {
                $("#playlist-view").animate({opacity: 0},50, function() {
                    $('#playlist-view').load('/Playlist/GetPlaylistGrid/', { id: @ViewBag.PlaylistId }, function() {
                        $("#playlist-view").animate({opacity: 1},50);
                    });
                });
            } else {
                $("#playlist-view").animate({opacity: 0},50, function() {
                    $('#playlist-view').load('/Playlist/GetPlaylist/', { id: @ViewBag.PlaylistId }, function() {
                        $("#playlist-view").animate({opacity: 1},50);
                    });
                });
            }
            updateUpcomingTracks();
        }

        var fullscreenEnabled = false;

        function fullscreenToggle() {
            $('#fullscreenplayer').fadeToggle(200);
            fullscreenEnabled = !fullscreenEnabled;

            if (fullscreenEnabled) {
                $("html").css("overflow", "hidden");
                if (document.documentElement.requestFullscreen) {
                    document.documentElement.requestFullscreen();
                } else if (document.documentElement.mozRequestFullScreen) {
                    document.documentElement.mozRequestFullScreen();
                } else if (document.documentElement.webkitRequestFullscreen) {
                    document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                }
            } else {
                $("html").css("overflow", "auto");
                if (document.cancelFullScreen) {
                    document.cancelFullScreen();
                } else if (document.mozCancelFullScreen) {
                    document.mozCancelFullScreen();
                } else if (document.webkitCancelFullScreen) {
                    document.webkitCancelFullScreen();
                }
            }
        }

        $('#fullscreenbutton').on('click', function() {
            fullscreenToggle();
        });

        $('#fullscreenexitbutton').on('click', function() {
            fullscreenToggle();
        });

        function updateUpcomingTracks() {
            $.ajax({
                url: '@Url.Action("GetUpcoming")',
                method: 'GET',
                data: { id: @ViewBag.PlaylistId },
                async: false
            }).done(function(data) {

                $('#fullscreenComingUp > ul').empty();

                var tracks = JSON.parse(data);

                if (tracks.length === 1) {
                    $('#fullscreenComingUp > ul').append('<li><span class="tracktitle">No tracks coming up next... Add some yourself!</span></li>');
                    return;
                }

                var scores = tracks[tracks.length - 1];

                for(var i=0; i<tracks.length - 1; i++) {
                    var playlistTrack = tracks[i];

                    var itemcls = "";
                    if (i === 0) itemcls = "first";
                    if (i === 1) itemcls = "second";
                    if (i === 2) itemcls = "third";

                    var itemHtml = '<li class="' + itemcls +  '">' +
	                                    '<span class="counter">' + (i + 1) + '</span>' +
	                                    '<img class="albumart" src="' + playlistTrack.Track.CoverArtUrl + '" alt="album art" />' +
	                                    '<span class="trackartist">' + playlistTrack.Track.Artist + '</span>' +
	                                    '<span class="tracktitle"> - ' + playlistTrack.Track.Title + '</span>' +
	                                    '<i class="material-icons">thumb_up</i>' +
	                                    '<span class="trackvotes">' + scores[i] + '</span>' +
                                    '</li>';

                    $('#fullscreenComingUp > ul').append(itemHtml);
                }

            }).fail(function() {
                notie.alert(3, 'Error refreshing upcoming tracks', 2.5);
            });
        }

        $(document).keyup(function(e) {
            if (e.which === 27) {
                $('#fullscreenplayer').fadeOut(200);
                fullscreenEnabled = false;
                $("html").css("overflow", "auto");
            }
        });

        function setClickableTooltip(target, content){
            $( target ).tooltip({
                show: null,
                position: { my: "center top", at: "center bottom" },
                content: content,
                hide: { effect: "" },
                close: function(event, ui) {
                    ui.tooltip.hover(
                        function() {
                            $(this).stop(true).fadeTo(400, 1);
                        },
                        function() {
                            $(this).fadeOut("400", function() {
                                $(this).remove();
                            });
                        }
                    );
                }
            });
        }

        var markupPlaylist = '<li class="playlist" data-id="${Description}">' +
               '<img class="thumbnail" src="${ImageUrl}"/>' +
               '<span class="artist">${Name}</span>' +
               '</li>';
        $.template("playlistTemplate", markupPlaylist);

        $.ajaxSetup({
            beforeSend: function() {
                $("#loadingPlaylist").show();
            },
            complete: function() {
                $("#loadingPlaylist").hide();
            }
        });
        $("#loadingPlaylist").hide();

        function fetchQueryResultsPlaylist() {
            $.ajax('@Url.Action("SearchPlaylist")/?q=' + $('#playlistAdd').val())
                .done(function(result) {
                    $("#resultsPlaylist").empty();
                    $.tmpl("playlistTemplate", result).appendTo("#resultsPlaylist");
                    $("#resultsPlaylist li").on("click", function() {
                        addPlaylist($(this).attr('data-id'));
                    });
                })
                .fail(function() {
                    alert("error");
                });
        }

        function addPlaylist(id) {
            $("#loadingPlaylist").show();
            notie.alert(1, 'Playlist is being added. This could take a while. Please wait...', 15);
            $("#close-modal-playlist").hide();
            $.ajax({
                url: '@Url.Action("AddPlaylist")',
                method: 'POST',
                data: { playlistId: @ViewBag.PlaylistId, id: id }
            }).done(function() {
                $("#loadingPlaylist").hide();
                $("waitPlaylist").hide();
                window.location.href = '/Playlist/View?key=' + '@ViewBag.PlaylistKey' + '#closePlaylist';
                updatePlaylist();
                var playBtn = document.getElementById('playBtn');
                playBtn.className = 'btn';
                playBtn.addEventListener("click", getNextTrack);
                play.server.addTrack("@Model.Id");
            });
        }

        function debouncePlaylist(func, wait, immediate) {
            var timeout;
            return function() {
                var context = this, args = arguments;
                var later = function() {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        };

        var debouncedFetchPlaylist = debouncePlaylist(function() {
            fetchQueryResultsPlaylist();
        }, 500);

        $("#playlistAdd").on('keydown', function() {
            debouncedFetchPlaylist();
        });
    </script>
<script src="../../Scripts/modernizr.js"></script>
<script>
        $(function () {

            var $container = $('#ib-container'),
                $articles = $container.children('article'),
                timeout;

            $articles.on('mouseenter', function (event) {

                var $article = $(this);
                clearTimeout(timeout);
                timeout = setTimeout(function () {

                    if ($article.hasClass('active')) return false;

                    $articles.not($article.removeClass('blur').addClass('active'))
                             .removeClass('active')
                             .addClass('blur');

                }, 65);

            });

            $container.on('mouseleave', function (event) {

                clearTimeout(timeout);
                $articles.removeClass('active blur');

            });

        });
    function changeColor(element, color) {
        document.getElementById(element).style.color = color;
    }

    function vote(element, vote, id) {
        if ("@Request.IsAuthenticated" === "False") {
            notie.alert(3, "You need to login to vote", 2.5)
            return
        }
        if ($('#'+element).attr("data-voted")!= null) {
            unVote(element, id)
            return
        }
        $.ajax({
            url: '@Url.Action("AddVote")',
            method: 'POST',
            data: {vote: vote, id: id},
        }).done(function () {
            changeColor(element, "black")
            //updatePlaylist()
            notie.alert(1,"Got it!", 2.5)
        }).fail(
            function (xhr, status, error) {
                if (xhr.status == 400) { notie.alert(3,"You have reached your vote limit for this playlist", 2.5); }
                else
                { notie.alert(3,"Error creating vote", 2.5); }
            })
    }

    function unVote(element, id) {
        $.ajax({
            url: '@Url.Action("UnVote")',
            method: 'POST',
            data: { id: id },
        }).done(function() {
            changeColor(element, "#BDBDBD")
            //updatePlaylist()
            notie.alert(1, "Got it!", 2.5)
        }).fail(function() {
                notie.alert(3, "Error deleting vote", 2.5)
            }
        );
    }
</script>

}