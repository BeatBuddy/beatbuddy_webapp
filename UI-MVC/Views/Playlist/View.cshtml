@using BB.BL.Domain.Playlists
@using BB.BL.Domain.Users
@using Microsoft.AspNet.Identity
@model Playlist
@{
    ViewBag.Title = "View";
    ViewBag.NoFooter = true;
}

@section escape_padding {
    <div id="playlistbanner">
        <div class="content">
            @{
                var imageUrl = Model?.ImageUrl ?? "playlist_default.png";
                <img class="borderround" src="~/Content/img/Playlists/@imageUrl" style="width: 150px; height: 150px" alt="Playlist image" />
            }

            <div class="fill">
                <div class="title">
                    <h1>Playlist</h1>@Model.Name
                </div>

                <a class="btn btn-right" style="margin-left: .5em" href="@Url.Action("View", "History", new {id = Model.Id})">
                    <i class="material-icons">history</i> History
                </a>

                <a class="btn btn-right">
                    <i class="material-icons">link</i> Share
                </a>
            </div>
            <p class="nomargintop textshadow">@Model.Description</p>

            <div>
                <h3 id="listenerCount"></h3>
                <div id="listenerImg" class="co-organiser" style="float: left;">
                </div>
            </div>
        </div>    
</div>}    

<div class="col-md-9">
<div id="playlist-view" style="margin-top: 1em;">
    @Html.Partial("PlaylistTable", @Model)
</div>

<div id="nowPlayingRow" style="margin-top: 5em">
    @if (((List<User>) ViewBag.Organisers).Any(p => p.Email == User.Identity.Name))
    {
        if (Model.PlaylistTracks.Count != 0)
        {
            <a class="btn" id="playBtn"><i id="icon" class="material-icons">play_arrow</i> </a>
            <a class="btn disabled" id="nextBtn"><i id="icon" class="material-icons">skip_next</i> </a>
        }
        else
        {
            <a class="btn disabled" id="playBtn"><i id="icon" class="material-icons">play_arrow</i> </a>
        }
    }
    else
    {
        <a class="btn" id="playBtn" style="display: none"><i id="icon" class="material-icons">play_arrow</i> </a>
        <a class="btn disabled" style="display: none" id="nextBtn"><i id="icon" class="material-icons">skip_next</i> </a>
    }
    @if (Request.IsAuthenticated)
    {
    <a href="#addTrackModal" class="btn btn-right" style="display: inline-block">
        <i class="material-icons">playlist_add</i> add track
    </a>
    }

</div>
   

<div id="addTrackModal" class="modal" style="margin-top: -150px">
    <div class="modal-content" style="width: 30%; height: 60%; min-width: 340px; overflow: hidden">
        <a href="#close" id="close-modal" title="Close" class="close">X</a>
        <div class="modal-body" style="height: 100%; width: 100%;">
            @{
                Html.RenderPartial("AddTrack");
            }
        </div>
    </div>
</div>
</div>

<div class="container col-md-3" style="background-color:#262626 ; color:white; margin-top: -32px; height:100%; position:absolute; right:0">
        <input type="text" class="custom-input" id="message" style="margin-top: 10px"/>
        <input type="button" id="sendmessage" value="Send" class="btn-chat"/>
        <input type="hidden" id="displayname" value="@ViewBag.CurrentUser.Nickname"/>
        <input type="hidden" id="image" value="@ViewBag.CurrentUser.ImageUrl" />
        @ViewBag.CurrentUser.ImageUrl
        <ul id="discussion" style="list-style:none; padding-left:0"></ul>
</div>

<div id="footerSlideContainer">
    <div id="footerSlideContent" style="width: 80%">
        <div id="footertop" style="text-align: center; cursor: pointer" click="clickFooter">
            <i id="footerIcon" class="material-icons">keyboard_arrow_up</i>
        </div>
        <i id="fullscreenbutton" class="material-icons">fullscreen</i>
        <table style="width: 100%; margin-top: -15px">
            <tr>
                <td style="width: 5%">
                    <img src="~/Content/img/default_cover.png" id="thumbnail" class="round" style="height: 75px; width: 75px; margin-top: 1em" />
                </td>
                <td style="width: 95%">
                    <div class="title" style="margin-top: 0.5em">
                        <h1>Now Playing </h1> <span id="nowPlaying"></span>
                    </div>
                    <span id="time"></span>
                    <div id="myProgress" class="progress" style="margin-top: 0.2em">
                        <div id="myBar" class="bar"></div>
                    </div>
                </td>
            </tr>

        </table>

    </div>
</div>


<div id="bottommargin"></div>
<div id="player" style="display: none"></div>

<div id="fullscreenplayer" style="display: none">
    <div id="darkoverlay">
        <img id="nowPlayingLogo" src="~/Content/img/logo_header_white.png" alt="beatbuddy logo" />
    </div>
    <div id="nowPlayingAlbumArt"></div>
    <span id="nowPlayingArtist">Nothing</span>
    <span id="nowPlayingTitle">Is playing right now</span>
    <div id="nowPlayingProgress">
        <div id="nowPlayingProgressBar"></div>
    </div>
    <i id="fullscreenexitbutton" class="material-icons">fullscreen_exit</i>
</div>

@section Scripts{
    <script src="~/Scripts/jquery.signalR-2.2.0.js"></script>
    <script src="~/signalr/hubs"></script>

<script>
    var play = $.connection.playlistHub;
    var chat = $.connection.chatHub;
    $(function () {
           chat.client.broadcastMessage = function (name, message, image) {
               var encodedName = $('<div />').text(name).html();
               var encodedMsg = $('<div />').text(message).html();
               $('#discussion').append('<li><div class="col-md-2" style="padding-right:0"> <img src="' + image + '" id="thumbnail" class="round" style="height: 30px; width: 30px;" /></div><div class="col-md-10"><strong>' + encodedName
                   + '</strong><br />' + encodedMsg + '</div></li>');
           };
           $('#message').focus();
           $.connection.hub.start().done(
               function () {
               
               chat.server.joinGroup("@Model.Id");
               $('#sendmessage').click(function () {
                   chat.server.send($('#displayname').val(), $('#message').val(),$('#image').val(),(@Model.Id));
                   $('#message').val('').focus();
                   alert($('#image').val())
               });
           });
       });

        $.connection.hub.start().done();

        play.client.addNewMessageToPage = function() {
            updatePlaylist();
        }

        play.client.startMusicPlaying = function(data) {
            player.cueVideoById(data.TrackId);
            document.getElementById("nowPlaying").innerHTML = data.Title + ' - ' + data.Artist;
            $(function() {
                setInterval(updateTime, 50);
            });
            openFooter();

            if (data.CoverArtUrl != null) {
            $('#thumbnail').attr("src", data.CoverArtUrl);
                $('#nowPlayingAlbumArt').css('background-image', "url(" + data.CoverArtUrl + ")");
                $('#fullscreenplayer').css('background-image', "url(" + data.CoverArtUrl + ")");
            } else {
                $('#thumbnail').attr("src", '@Url.Content("~/Content/img/default_cover.png")');
                $('#nowPlayingAlbumArt').css('background-image', "url(" + '@Url.Content("~/Content/img/default_cover.png")' + ")");
                $('#fullscreenplayer').css('background-image', "url(" + '@Url.Content("~/Content/img/default_cover.png")' + ")");
            }
            updatePlaylist();
            player.playVideo();
        }

        play.client.pauseMusicPlaying = function() {
            player.pauseVideo();
        }

        play.client.resumeMusicPlaying = function(data) {
            player.seekTo(data);
            player.playVideo();
        }

        play.client.modifyListeners = function(data, users) {
            console.log(users.length);
            var src = document.getElementById('listenerImg');
            var i;
            var unknownUserCounter = 0;
            while (src.firstChild) {
                src.removeChild(src.firstChild);
            }
            var img;
            for (i = 0; i < users.length; i++) {
                console.log(users[i]);
                img = document.createElement("img");
                if (users[i].User != null) {
                    if (users[i].User.ImageUrl != null) {
                        img.src = "/Content/img/Users/" + users[i].User.ImageUrl;    
                    } else {
                        img.src = "/Content/img/default-avatar.png";    
                    }
                    img.className = 'round';
                    img.style.marginRight = "10px";
                    img.title = users[i].User.Email;
                    src.appendChild(img);    
                } else {
                    unknownUserCounter++;

                }
            }
            if (unknownUserCounter > 0) {
                img = document.createElement("img");
                img.src = "/Content/img/default-avatar.png";
                img.className = 'round';
                img.title = unknownUserCounter + " sneaky listener(s)";
                src.appendChild(img); 
            }
            document.getElementById('listenerCount').innerHTML = data+"";
        }

        play.client.joinGroup = function() {
            play.server.joinGroup("@Model.Id");
        }

        var playing = false;
        var footerOpen = false;
        jQuery(function($) {
            $('#footertop').click(function () {
                if(footerOpen === false) {
                    openFooter();
                } else {
                    closeFooter();
                }
            });
        });

        function clickFooter() {
            if (footerOpen) {
                closeFooter();
            } else {
                closeFooter();
            }
        }

        function openFooter() {
            $('#footerSlideContent').animate({ height: '125px' });
            $(this).css('backgroundPosition', 'bottom left');
            $('#bottommargin').animate({ marginBottom: '9em' }, 500, null);
            footerOpen = true;
            var footerIcon = document.getElementById("footerIcon");
            footerIcon.innerHTML = 'keyboard_arrow_down';
        }

        function closeFooter() {
            $('#footerSlideContent').animate({ height: '20px' });
            $(this).css('backgroundPosition', 'top left');
            $('#bottommargin').animate({ marginBottom: '3em' }, 500, null);
            footerOpen = false;
            var footerIcon = document.getElementById("footerIcon");
            footerIcon.innerHTML = 'keyboard_arrow_up';
        }


        var markup = '<li class="track" data-id="${TrackSource.TrackId}">' +
            '<img class="thumbnail" src="${CoverArtUrl}"/>' +
            '<span class="artist">${Artist}</span>' +
            '<span class="tracktitle">${Title}</span>' +
            '</li>';
        $.template("trackTemplate", markup);

        $.ajaxSetup({
            beforeSend: function() {
                $("#loading").show();
            },
            complete: function() {
                $("#loading").hide();
            }
        });
        $("#loading").hide();

        function fetchQueryResults() {
            $.ajax('@Url.Action("SearchTrack")/?q=' + $('#query').val())
                .done(function(result) {
                    $("#results").empty();
                    $.tmpl("trackTemplate", result).appendTo("#results");
                    $("#results li").on("click", function() {
                        addTrack($(this).attr('data-id'));
                    });
                })
                .fail(function() {
                    alert("error");
                });
        }

        function addTrack(id) {
            $.ajax({
                url: '@Url.Action("AddTrack")',
                method: 'POST',
                data: { playlistId: @ViewBag.PlaylistId, id: id },
                async: false
            }).done(function() {
                window.location.href = @ViewBag.PlaylistId + '#close';
                updatePlaylist();
                var playBtn = document.getElementById('playBtn');
                playBtn.className = 'btn';
                playBtn.addEventListener("click", getNextTrack);
                play.server.addTrack("@Model.Id");
            }).fail(function() {
                notie.alert(3, 'You cannot add a song that is already in the list or is already played', 2.5);
            });
        }

        function debounce(func, wait, immediate) {
            var timeout;
            return function() {
                var context = this, args = arguments;
                var later = function() {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        };

        var debouncedFetch = debounce(function() {
            fetchQueryResults();
        }, 500);

        $("#query").on('keydown', function() {
            debouncedFetch();
        });

        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        var player;

        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '390',
                width: '640',
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }
        var firstPlay = false;

        function onPlayerReady(event) {
            var playButton = document.getElementById("playBtn");
            if(playButton != null) playButton.addEventListener("click", getNextTrack);

            var nextButton = document.getElementById("nextBtn");
            if(nextButton != null) nextButton.addEventListener("click", function() {
                getNextTrack();
            });
        }

        function assignPlaylistMaster(userData) {
            $.ajax('/Playlist/AssignPlaylistMaster/', {
                type: 'POST',
                async: false,
                data: { id: @ViewBag.PlaylistId, userEmail: userData}
            }).done(function() {
                updatePlaylist();
            }).fail(function() {

            });
        }

        function updateTime() {
            var time = document.getElementById("time");
            var currentTime = secondsToTime(player.getCurrentTime());
            var duration = secondsToTime(player.getDuration());
            time.innerHTML = currentTime +' | ' + duration;
            var percentageTime = (player.getCurrentTime() / player.getDuration()) * 100;

            var bar = document.getElementById("myBar");
            bar.style.width = percentageTime + '%';

            var barFullscreen = document.getElementById("nowPlayingProgressBar");
            barFullscreen.style.width = percentageTime + '%';
        }

        function secondsToTime(secs)
        {
            d = Number(secs);
            var h = Math.floor(d / 3600);
            var m = Math.floor(d % 3600 / 60);
            var s = Math.floor(d % 3600 % 60);
            return ((h > 0 ? h + ":" + (m < 10 ? "0" : "") : "") + m + ":" + (s < 10 ? "0" : "") + s);
        }
        var startedPlaying = false;

        function onPlayerStateChange(event) {
            var playButton = document.getElementById("playBtn");
            playButton.removeEventListener("click", getNextTrack);
            var icon = document.getElementById("icon");
            if (event.data === -1) {
                player.playVideo();
            }
            if (event.data === YT.PlayerState.PLAYING) {
                playing = true;
                playButton.addEventListener("click", function() {
                    player.pauseVideo();
                    play.server.pausePlaying("@Model.Id");
                });
                icon.innerHTML = 'pause';
            }
            if (event.data === YT.PlayerState.PAUSED) {
                icon.innerHTML = 'play_arrow';
                playButton.addEventListener("click", function() {
                    player.playVideo();
                    play.server.resumePlaying(player.getCurrentTime(),"@Model.Id");
                });
            }

            if (startedPlaying && event.data === YT.PlayerState.ENDED) {
                playing = false;
                getNextTrack();
            }
        }

        function getNextTrack() {
            $.ajax('/Playlist/GetNextTrack/', {
                type: 'GET',
                data: { id: @ViewBag.PlaylistId },
                contentType : "application/json",
                dataType : "json"
            }).done(function(data) {
                if (data!=null) {
                    if (!startedPlaying) startedPlaying = true;
                    player.cueVideoById(data.TrackId);
                    document.getElementById("nowPlaying").innerHTML = data.Title + ' - ' + data.Artist;
                    $(function() {
                        setInterval(updateTime, 50);
                    });
                    var nextButton = document.getElementById("nextBtn");
                    if (nextButton != null) {
                        if (data.nextTracks === 1) {
                            nextButton.className = 'btn disabled';
                        } else {
                            nextButton.className = 'btn';
                        }
                    }
                }
                openFooter();
                moveTrackToHistory();

                if (data.CoverArtUrl != null) {
                    $('#thumbnail').attr("src", data.CoverArtUrl);
                    $('#nowPlayingAlbumArt').css('background-image', "url(" + data.CoverArtUrl + ")");
                    $('#fullscreenplayer').css('background-image', "url(" + data.CoverArtUrl + ")");
                } else {
                    $('#thumbnail').attr("src", '@Url.Content("~/Content/img/default_cover.png")');
                    $('#nowPlayingAlbumArt').css('background-image', "url(" + '@Url.Content("~/Content/img/default_cover.png")' + ")");
                    $('#fullscreenplayer').css('background-image', "url(" + '@Url.Content("~/Content/img/default_cover.png")' + ")");
                }

                $('#nowPlayingTitle').html(data.Title);
                $('#nowPlayingArtist').html(data.Artist);
                $('#thumbnail').attr("src", data.CoverArtUrl);

                player.playVideo();
                play.server.startPlaying(data, "@Model.Id");
            }).fail(function() {
                var playBtn = document.getElementById('playBtn');
                playBtn.className = 'btn disabled';
                var icon = document.getElementById("icon");
                icon.innerHTML = 'play_arrow';
                document.getElementById("nowPlaying").innerHTML = '';
                closeFooter();
                playBtn.addEventListener("click", getNextTrack);
                var time = document.getElementById("time");
                time.innerHTML = '';
            });
        }

        function moveTrackToHistory() {
            $.ajax('/Playlist/MoveTrackToHistory/', {
                type: 'POST',
                data: { id: @ViewBag.PlaylistId },
                async: false
            }).done(function() {
                if (!firstPlay) {
                    assignPlaylistMaster('@User.Identity.Name');
                    firstPlay = true;
                } else {
                    updatePlaylist();
                }
            }).fail(function() {
                var nextButton = document.getElementById("nextBtn");
                nextButton.className = 'btn disabled';
                var playButton = document.getElementById("playBtn");
                playButton.className = 'btn disabled';
                var icon = document.getElementById("icon");

                icon.innerHTML = 'play_arrow';
            });
        }

        function stopVideo() {
            player.stopVideo();
        }

        function updatePlaylist() {
            $('#playlist-view').load('/Playlist/GetPlaylist/',{id: @ViewBag.PlaylistId});
            var rowCount = $('#playlist-tracks tr').length;
            if (rowCount >= 1 && playing) {
                var nextButton = document.getElementById("nextBtn");
                nextButton.className = 'btn';
            }
        }

        var fullscreenEnabled = false;
        function fullscreenToggle() {
            $('#fullscreenplayer').fadeToggle(200);
            fullscreenEnabled = !fullscreenEnabled;
        }

        $('#fullscreenbutton').on('click', function() {
            fullscreenToggle();
        });

        $('#fullscreenexitbutton').on('click', function() {
            fullscreenToggle();
        });

        $(document).keyup(function(e) {
            if (e.which === 27) {
                $('#fullscreenplayer').fadeOut(200);
                fullscreenEnabled = false;
            }
        });

        window.onunload = window.onbeforeunload = (function() {
            assignPlaylistMaster(@null);
        });


        function setClickableTooltip(target, content){
            $( target ).tooltip({
                show: null,
                position: { my: "center top", at: "center bottom" },
                content: content,
                hide: { effect: "" },
                close: function(event, ui){
                    ui.tooltip.hover(
                        function () {
                            $(this).stop(true).fadeTo(400, 1); 
                        },
                        function () {
                            $(this).fadeOut("400", function() {
                                $(this).remove();
                            });
                        }
                    );
                }  
            });
        }

    </script>
}